Priprava za Pyenv
sudo apt update; sudo apt install -y make build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
curl https://pyenv.run | bash
echo -e '\n# Pyenv configuration' >> ~/.bashrc
echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(pyenv init --path)"' >> ~/.bashrc
echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc
source ~/.bashrc
Pyenv ukazi
Pyenv verions --- nameščene verzije
Pyenv install <verzija> --- namestitev verzije
Pyenv local <verzija> --- lokalna verzija
Pyenv global <verzija> --- globalna verzija
Python -m venv venv --- ustvarimo venv
Source vevn/bin/activate --- zaženemo virtualno okolje
Deactivate – izključimo okolje
Requirements datoteka
fastapi
uvicorn[standard]
sqlalchemy>=2.0
aiosqlite
pip install -r requirements.txt
Git
git config --global user.name "Your Name"
git config --global user.email you@example.com
ls ~/.ssh – pregled ssh ključev
ssh-keygen -t rsa -C »email« ---- ustvarimo ssh ključe
cat ~/.ssh/id_rsa.pub – izpišemo naš javni ključ
git init
git remote add origin https://github.com/your-username/your-repo.git (https)ali git remote set-url origin git@github.com:your-username/your-repo.git(ssh)
git add .
git commit -m "Initial commit"
git push -u origin master




----------------------------------------------------

from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from pydantic import BaseModel
from typing import List

from models import Base, Item as ItemModel
from database import engine, SessionLocal

app = FastAPI()

# Create tables
@app.on_event("startup")
async def on_startup():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

class ItemCreate(BaseModel):
    name: str
    description: str = None

class ItemRead(ItemCreate):
    id: int

    class Config:
        orm_mode = True

async def get_session() -> AsyncSession:
    async with SessionLocal() as session:
        yield session

@app.get("/")
def read_root():
    return "TODO app"

@app.post("/items/", response_model=ItemRead)
async def create_item(item: ItemCreate, session: AsyncSession = Depends(get_session)):
    return "todo"

@app.get("/items/", response_model=List[ItemRead])
async def read_items(session: AsyncSession = Depends(get_session)):
    result = await session.execute(select(ItemModel))
    return result.scalars().all()

@app.get("/items/{item_id}", response_model=ItemRead)
async def read_item(item_id: int, session: AsyncSession = Depends(get_session)):
    return "todo"

@app.put("/items/{item_id}", response_model=ItemRead)
async def update_item(item_id: int, item: ItemCreate, session: AsyncSession = Depends(get_session)):
    return "todo"

@app.delete("/items/{item_id}")
async def delete_item(item_id: int, session: AsyncSession = Depends(get_session)):
    return "todo"
---------------------------------------
from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Item(Base):
    __tablename__ = "items"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String, nullable=True)
